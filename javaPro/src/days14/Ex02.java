package days14;

public class Ex02 {
	public static void main(String[] args) {
		
		/*
		 * 객체지향 프로그래밍 (Object Oriented Programming)
		 * 프로그램 코딩 방법 중 하나
		 * 예) 조립컴퓨터 == 부품+부품+부품+부품
		 * 
		 * 
		 * 2. 클래스 : 객체를 만들기 위한 설계도 -> 객체의 설계도
		 * 3. 객체 (Object) : 클래스(설계도)를 가지고 실제 존재하는 만든 것
		 *					  무형, 유형
		 * 4. 객체 = 속성(특징) + 기능(동작)
		 * 		   = 필드		  메서드
		 * 5. 객체 모델링 (object modeling) : 현실세계의 객체를 소프트웨어 객체로 모델링
		 * 6. OOP (클래스) 특징
		 * 	   - 캡슐화 : 객체의 필드, 메소드의 실제 구현 내용을 외부에 감추는것
		 * 			[은닉화(정보은닉)] : 접근제한자(Modifier) = 접근 제어자 + 기타 제어자
		 * 														public, private
		 *     - 상속 : 부모객체가 자식객체에게 필드와 메소드를 물려주는것
		 *     			코드의 재사용 가능 
		 *     			유지보수에 용이하다
		 *     - 다형성 : 
		 *     - 추상화
		 *     
		 * 7. 클래스, 객체, 인스턴스
		 * 	   - 인스턴스 : 클래스로부터 생성된 객채를 인스턴스
		 * 		 해당 클래스 타입을 가지고 있는 변수를 객체, 
		 * 		 그 객체에 주소값이 할당된것이 인스턴스
		 * 
		 * 8. 인스턴스화 : 클래스로부터 객체를 만드는 과정
		 * 
		 * 9. 객체의 구성요소 (멤버)
		 * 		1) 속성==특징 : 필드 == 멤버변수
		 * 		2) 기능==동작 : 메서드 == 멤버함수
		 * 
		 * 10. 클래스 설계하는 과정
		 * 		1) 객체의 구성요소(속성,기능) 파악 -> 목록 작성
		 * 		2) 객체 모델링 - 속성->필드 기능->메소드
		 * 		3) 클래스 선언
		 * 		접근제한자 (접근지정자, 기타제어자) + 클래스 + 클래스 명 {
		 * 
		 * 				// 필드 선언
		* 				// 메서드 선언
		 * 			}
		 *		4) 객체 생성 - 테스트 	
		 *		5) 문제점 파악 - 유지보수
		 *		6) 상용화, 확장, 등등... 	
		 *
		 */
		
	} // main

}
