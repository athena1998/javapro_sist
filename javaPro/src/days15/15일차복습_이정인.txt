1. private로 선언된 필드에 접근한 방법에 대해서 설명하세요.
생성자를 생성해 필드값을 초기화하고 getter와 setter를 통해 해당 필드 값에 접근함

2. 기본형/참조형 매개변수와 기본형/참조형 반환타입에 대해서 설명하세요.  ( 개념 )
기본형 매개변수는 값을 리턴하고 참조형 매개변수는 주소값을 리턴함

3. 생성자에 대해서 설명하세요.
   1. 일종의 메소드이다
   2. 리턴자료형 x
   3. 반드시 메서드 명은 클래스명과 동일해야함
   4. 매개변수 x 없는 생성자를 기본 생성자 (default constructor)
   5. 생성자의 역할 : 필드를 초기화하는데 사용
   6. 호출되는 시기 : 인위적으로 생성자를 호출할수 없음
  					  객체를 생성할때만 자동으로 호출
   7. 접근제한자를 사용할 수 있다. 
   8. 생성자도 오버로딩이 가능하다 == 중복선언이 가능하다.
   9. 생성자는 상속되지 않는다.
   10. 생성자가 하나도 없는 경우에는 컴파일러가 자동으로 디폴트 생성자를 추가한다.

4. this 키워드에 대해서 설명하세요.
객체 자신을 가리키는 함수
클래스 자기자신의 주소값을 가지는 참조변수

5. 아래 코딩을 클래스( 객체) 배열 초기화를 사용해서 코딩하세요 
		Student s1 = new Student();
		Student s2 = new Student();
		Student s3 = new Student();

		Student[] sArr = new int[3];
		for(int i=0; i<sArr.length; i++) {
		    sArr[i] = new Student();
		}

6. 객체 복사(copy)와 객체 복제(clone)에 대해서 설명하세요.. 	
   - 객체 복제는 객체를 하나부터 열까지 똑같이 복사하여 새로운 객체를 생성하는것
   - 객체 복사는 얕은복사와 깊은 복사가 있는데 얕은 복사는 기본형 필드는 그대로 복사하지만 
      참조형 필드는 원본 객체와 복사된 객체가 같은 참조를 공유하여 완전히 독립적인 객체라고 할 수 없다
   - 깊은 복사는 객체에 존재하는 모든 필드들을 복사하여 원본 객체와 복사된 객체가 완전히 독립적인 객체라고 할 수 있다.

7. 에러 메시지 : The constructor System() [is not visible] 에 대해서 설명하세요.
    - 생성자의 접근지정자때문에 접근 불가할때 나는 오류

8. [static 키워드]에 대해서 설명하세요. 
   - 기타제어자에서 정적변수

9. "오버로딩"에 대해서 설명하세요.
  - 동일한 이름을 가진 메소드를 매개변수와 리턴값을 다르게 하여 이름은 같아도 각각 다른 기능을 수행할 수 있는 것
    생성자는 리턴값이 없지만 생성될때마다 매개변수가 다르게 생성되어 생성자 오버로딩이 가능하다.

 	public Save() {

	}

	public Save(String name, int money, double rate) {
		this.name = name;
		this.money = money;
		this.rate = rate;
	}

10. 아래 두 문자열의 대소문자 구분 없이, 순서 상관 없이 같은 문자여부를 체크하는 코딩을 하세요. 

		String n = "keNik";   
		String m= "kKnie";    
		
		String[] splitN = n.toLowerCase().split("");
		String[] splitM = m.toLowerCase().split("");
		
		Arrays.sort(splitN);
		Arrays.sort(splitM);
		
		boolean isEqual = true;
		for (int i = 0; i < splitM.length; i++) {
			if (!splitN[i].equalsIgnoreCase(splitM[i])) {
				isEqual = false;
			} // if
		} // for i
		
		if (isEqual) {
			System.out.println("두개의 문자열이 같습니다.");
		} else {
			System.out.println("두개의 문자열이 다릅니다.");			
		}
